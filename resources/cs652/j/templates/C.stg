CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = calloc(1, clazz->size); // wipe to 0s
    p->clazz = clazz;
    return p;
}

<classes>

<main>
>>

ClassDef(class, fields, methods, vtable) ::= <<
// D e f i n e  C l a s s  <class.name>
typedef struct {
    metadata *clazz;
  <fields>
} <class.name>;


void(*<class.name>_vtable[])() = {
    <vtable:{f | &<f>};separator=", ">
    };

metadata <class.name>_metadata = {"<class.name>", sizeof(<class.name>), &<class.name>_vtable};
<methods:{method|<method>};separator="\n">
>>

MethodDef(m,funcName,returnType,args,body) ::= <<
<returnType> <m.funcName>((<args:{arg|<arg>}; separator=", ">))
>>

MainMethod(main,funcName,returnType,args,body) ::= <<
int main(int argc, char *argv[]){
<body>
return 0;
}
>>

Block(block, locals, instrs) ::= <<
<locals>
<instrs>
>>

VarDef(var, type)   ::= <<
<var.type> <var.id>;
>>

FuncName(f)         ::= "<f.method.name>_<f.method.name>"

ObjectTypeSpec(o)   ::= ""
PrimitiveTypeSpec(p)::= "<p.name>"

AssignStat(a,left,right) ::= "<left> = <right>;"
PrintStringStat(p)  ::= "printf(<p.content>);"
PrintStat(p,args)   ::= <<
printf(<p.name>,<args:{arg|<arg>};separator=", ">);
>>
CallStat(c,call)    ::= ""
CtorCall(ctor)      ::= "((<ctor.className> *)alloc(&<ctor.className>_metadata))"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, stat) ::= "while ( <condition> ) <w.stat>"
IfStat(i,condition, stat) ::= "if( <condition> )<stat>"
IfElseStat(i,condition, stat, elseStat) ::= <<
if( <condition> ) <stat>
    else <elseStat>
>>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.name>"
VarRef(v)           ::= "<v.name>"
FieldRef(f, object) ::= "<object>-><f.fieldName>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
>>

FuncPtrType(f, returnType, argTypes) ::= ""
TypeCast(cast, type, expr) ::= ""
